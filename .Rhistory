nllh$LLR <- NA
View(nllh)
library(purrr)
library(ggpubr)
source("code/BreakPoints.R")
source("code/NonLinearGEV/FitLinear.R")
source("code/NonLinearGEV/CutBreakpoint.R")
source("code/NonLinearGEV/ll.R")
source("code/NonLinearGEV/CI.R")
source("code/NonLinearGEV/FitQuadratic.R")
source("code/NonLinearGEV/FitAbrupt.R")
source("code/NonLinearGEV/ReturnLevel.R")
source("code/NonLinearGEV/GraphData.R")
source("code/NonLinearGEV/PlotParameter.R")
#### GEV marginal ####
SummerMaxima <- data %>% group_by(station, DecYear) %>% summarise(max(Q)) %>% spread(station, `max(Q)`)
Graph <- list()
ReturnPlot <- list()
nllh <- matrix(NA, nrow = NoSt, ncol = 9)
for(i in 1:NoSt){
Station <- SummerMaxima[,c(1, i+1)]
names(Station) <- c("DecYear", "Q")
x = Station
fit1 <- FitLinear(as.matrix(x$Q), point[i, 1], point[i, 2], shape[i],se[i])
fit2 <- FitQuadratic(as.matrix(x$Q), shape[i], se[i])
fit3 <- FitAbrupt(as.matrix(x$Q), point[i, 1], point[i, 2], shape[i],se[i])
FitList <- list(fit1[[1]], fit1[[2]], fit1[[3]], fit1[[4]], fit2, fit3)
r <- which.min(c(
fit1[[2]]$AIC,
fit1[[3]]$AIC,
fit1[[4]]$AIC,
fit2$AIC,
fit3$AIC
))
FitList[[7]] <- FitList[[r + 1]]
for(j in 1:7){
nllh[i, j] <- FitList[[j]]$nllh
}
nllh[i, 8] <- r + 1
if(2*(FitList[[7]]$nllh - fit1[[2]]$nllh) < qchisq(0.95, 1)){
nllh[i,9] <- "no"
}else{
nllh[i,9] <- "yes"
}
nR2 <- ReturnLevel(FitList[[7]], 1 / 2)
nR10 <- ReturnLevel(FitList[[7]], 1 / 10)
nR100 <- ReturnLevel(FitList[[7]], 1 / 100)
R2 <- ReturnLevel(fit1[[2]], 1 / 2)
R10 <- ReturnLevel(fit1[[2]], 1 / 10)
R100 <- ReturnLevel(fit1[[2]], 1 / 100)
p2 <- ggplot(nR2) +
geom_line(aes(x = Year, y = est, color = "nsGEV", linetype = "model")) +
geom_line(aes(x = Year, y = U, color = "nsGEV", linetype = "95% CI")) +
geom_line(aes(x = Year, y = L, color = "nsGEV", linetype = "95% CI")) +
geom_line(data = R2, aes(x = Year, y = est, color = "sGEV", linetype = "model")) +
geom_line(data = R2, aes(x = Year, y = U, color = "sGEV", linetype = "95% CI")) +
geom_line(data = R2, aes(x = Year, y = L, color = "sGEV", linetype = "95% CI")) +
labs(title = paste0("Station", i, ": 2-year"), ylab = "Return level") +
xlab(NULL)+
ylab("Return level") +
scale_linetype_manual(values = c(2, 1))
p10 <- ggplot(nR10) +
geom_line(aes(x = Year, y = est, color = "nsGEV", linetype = "model")) +
geom_line(aes(x = Year, y = U, color = "nsGEV", linetype = "95% CI")) +
geom_line(aes(x = Year, y = L, color = "nsGEV", linetype = "95% CI")) +
geom_line(data = R10, aes(x = Year, y = est, color = "sGEV", linetype = "model")) +
geom_line(data = R10, aes(x = Year, y = U, color = "sGEV", linetype = "95% CI")) +
geom_line(data = R10, aes(x = Year, y = L, color = "sGEV", linetype = "95% CI")) +
labs(title = paste0("Station", i, ": 10-year")) +
xlab(NULL)+
ylab(NULL)+
scale_linetype_manual(values = c(2, 1))
p100 <- ggplot(nR100) +
geom_line(aes(x = Year, y = est, color = "nsGEV", linetype = "model")) +
geom_line(aes(x = Year, y = U, color = "nsGEV", linetype = "95% CI")) +
geom_line(aes(x = Year, y = L, color = "nsGEV", linetype = "95% CI")) +
geom_line(data = R100, aes(x = Year, y = est, color = "sGEV", linetype = "model")) +
geom_line(data = R100, aes(x = Year, y = U, color = "sGEV", linetype = "95% CI")) +
geom_line(data = R100, aes(x = Year, y = L, color = "sGEV", linetype = "95% CI")) +
labs(title = paste0("Station", i, ": 100-year"), ylab = "Return level") +
xlab(NULL)+
ylab(NULL)+
scale_linetype_manual(values = c(2, 1))
ReturnPlot[[i]] <- list(p2, p10, p100)
est <- GraphData(
FitList,
c("linear_fit", "s_fit", "single_fit", "double_fit", "quad_fit", "abrupt_fit", "best_fit")
)
Graph[[i]] <- PlotParameter(
est[[1]], est[[2]], est[[3]],
Station, i,
ignore = c("linear_fit", "s_fit", "single_fit", "double_fit", "quad_fit", "abrupt_fit")
)
print(paste("Station", i))
print(round(FitList[[7]]$mle, 2))
print(FitList[[7]]$formulation)
}
View(nllh)
nllh <- as.data.frame(nllh)
View(nllh)
names(nllh) <- c("linear_fit", "s_fit", "single_fit", "double_fit", "quad_fit", "abrupt_fit", "best_fit", "n","significance")
save(nllh, file = "data/nllh.Rdata")
U <- 0.9
Lag <- 5
StNames <- as.character(1:NoSt)
mfrow <- c(1,1)
YearsWithEvents <- list()
Threshold <- numeric()
AllEvents <- list()
NoOfYears <- numeric()
library(ismev)
library(evd)
library(tidyverse)
source("F:/Extre/Codes/Functions.R")
load("F:/StreamFlow/joint_fitting/joint.Rdata")
# June July Aug
data <- data %>% filter(Month %in% 6:8)
data$station <- rep(new$site_no,each = 3680)
#### GEV marginal ####
SummerMaxima <- data %>% group_by(station, DecYear) %>% summarise(max(Q)) %>% spread(station, `max(Q)`)
#### Extraction of univariate events  ####
U <- 0.9
Lag <- 5
StNames <- as.character(1:NoSt)
mfrow <- c(1,1)
YearsWithEvents <- list()
Threshold <- numeric()
AllEvents <- list()
NoOfYears <- numeric()
for (i in 1:NoSt) {
index <- ((i-1)*3680+1):(i*3680)
TSs <- data[index,]
TSs <- TSs %>% select(Date, Q)
names(TSs) <- c("Date", "Val")
X <- TSs$Val
Threshold[i] <- quantile(X,U)
Years <- unique(as.numeric(substr(TSs$Date,1,4)))
Events <- numeric()
YearEvents <- numeric()
for (j in 1:length(Years)) {
X1 <- ObtainMultVarEvents(TSs = TSs,U=U,Lag=Lag,Year=Years[j],StNames=StNames[i],Plotting=0,mfrow)
X2 <- as.numeric(X1$AllEvMat)
Events  <- c(Events,X2)
YearEvents <- c(YearEvents,rep(Years[j],length(X2)))
}
AllEvents[[i]] <- Events
YearsWithEvents[[i]] <- YearEvents
NoOfYears[i] <- length(Years)
for (i in 1:NoSt) {
index <- ((i-1)*3680+1):(i*3680)
TSs <- data[index,]
TSs <- TSs %>% select(Date, Q)
names(TSs) <- c("Date", "Val")
X <- TSs$Val
Threshold[i] <- quantile(X,U)
Years <- unique(as.numeric(substr(TSs$Date,1,4)))
Events <- numeric()
YearEvents <- numeric()
for (j in 1:length(Years)) {
X1 <- ObtainMultVarEvents(TSs = TSs,U=U,Lag=Lag,Year=Years[j],StNames=StNames[i],Plotting=0,mfrow)
X2 <- as.numeric(X1$AllEvMat)
Events  <- c(Events,X2)
YearEvents <- c(YearEvents,rep(Years[j],length(X2)))
}
AllEvents[[i]] <- Events
YearsWithEvents[[i]] <- YearEvents
NoOfYears[i] <- length(Years)
}
library(ismev)
library(evd)
library(tidyverse)
source("F:/Extre/Codes/Functions.R")
load("F:/StreamFlow/joint_fitting/joint.Rdata")
# June July Aug
data <- data %>% filter(Month %in% 6:8)
data$station <- rep(new$site_no,each = 3680)
#### GEV marginal ####
SummerMaxima <- data %>% group_by(station, DecYear) %>% summarise(max(Q)) %>% spread(station, `max(Q)`)
#### Extraction of univariate events  ####
U <- 0.9
Lag <- 5
StNames <- as.character(1:NoSt)
mfrow <- c(1,1)
YearsWithEvents <- list()
Threshold <- numeric()
AllEvents <- list()
NoOfYears <- numeric()
for (i in 1:NoSt) {
index <- ((i-1)*3680+1):(i*3680)
TSs <- data[index,]
TSs <- TSs %>% select(Date, Q)
names(TSs) <- c("Date", "Val")
X <- TSs$Val
Threshold[i] <- quantile(X,U)
Years <- unique(as.numeric(substr(TSs$Date,1,4)))
Events <- numeric()
YearEvents <- numeric()
for (j in 1:length(Years)) {
X1 <- ObtainMultVarEvents(TSs = TSs,U=U,Lag=Lag,Year=Years[j],StNames=StNames[i],Plotting=0,mfrow)
X2 <- as.numeric(X1$AllEvMat)
Events  <- c(Events,X2)
YearEvents <- c(YearEvents,rep(Years[j],length(X2)))
}
AllEvents[[i]] <- Events
YearsWithEvents[[i]] <- YearEvents
NoOfYears[i] <- length(Years)
}
}
StsChos <- c(1:24)
source("F:/Extre/Codes/Functions.R")
load("F:/StreamFlow/joint_fitting/joint.Rdata")
data <- data %>% filter(Month %in% 6:8)
data$station <- rep(new$site_no,each = 3680)
StsChos <- c(1:24)
NoSt <- length(StsChos)
SummerMaxima <- data %>% group_by(station, DecYear) %>% summarise(max(Q)) %>% spread(station, `max(Q)`)
U <- 0.9
Lag <- 5
StNames <- as.character(1:NoSt)
mfrow <- c(1,1)
YearsWithEvents <- list()
Threshold <- numeric()
AllEvents <- list()
NoOfYears <- numeric()
for (i in 1:NoSt) {
index <- ((i-1)*3680+1):(i*3680)
TSs <- data[index,]
TSs <- TSs %>% select(Date, Q)
names(TSs) <- c("Date", "Val")
X <- TSs$Val
Threshold[i] <- quantile(X,U)
Years <- unique(as.numeric(substr(TSs$Date,1,4)))
Events <- numeric()
YearEvents <- numeric()
for (j in 1:length(Years)) {
X1 <- ObtainMultVarEvents(TSs = TSs,U=U,Lag=Lag,Year=Years[j],StNames=StNames[i],Plotting=0,mfrow)
X2 <- as.numeric(X1$AllEvMat)
Events  <- c(Events,X2)
YearEvents <- c(YearEvents,rep(Years[j],length(X2)))
}
AllEvents[[i]] <- Events
YearsWithEvents[[i]] <- YearEvents
NoOfYears[i] <- length(Years)
}
PPRes <- list()
ParsPP <- matrix(0,NoSt,3)
PPLLFree <- numeric()
for (i in 1:NoSt) {
Init <- GevPars[i,]
PPRes[[i]] <- PPFit(Data=AllEvents[i],u=Threshold[i],NoYears=NoOfYears[i],
Init=Init,CovarMu=matrix(1,1,1),CovarSc=matrix(1,1,1),
CovarXi=matrix(1,1,1),LogModel=FALSE,method=method,control=control)
ParsPP[i,] <- PPRes[[i]]$par
PPLLFree[i] <- PPRes[[i]]$value
}
summary(ParsPP)
M1LL <- sum(PPLLFree)
data <- data %>% select(Date, Q)
data$station <- rep(new$site_no,each = 3680)
data <- data %>% spread(station, Q)
StsChos <- c(1:27)
NoSt <- length(StsChos)
Years <- unique(as.numeric(substr(data$Date,1,4)))
U <- 0.1
Lag <- 4
Plotting <- 0
StNames <- as.character(StsChos)
YearsWithEvent <- numeric()
AllEvMat <- matrix(0,length(StNames),1)
AllRes <- list()
for (i in 1:length(Years)){
Res <- ObtainMultVarEvents(TSs=data,U=U,Lag=Lag,Year=Years[i],StNames=StNames,Plotting=Plotting,mfrow=c(NoSt,1))  ## For Censored Likelihood
Events <- Res$AllEvMat
Locations <- Res$Location
if (length(Events)>0) {
YearsWithEvent <- c(YearsWithEvent,rep(Years[i],dim(Events)[2]))
AllEvMat <- cbind(AllEvMat,Events)
}
AllRes[[i]] <- Res
}
DataEvents <- t(AllEvMat[,-1])
rownames(DataEvents) <- YearsWithEvent
Theta.cen <- matrix(1,ncol = NoSt,nrow = NoSt)
for(i in 1:(NoSt-1))
for(j in (i+1):NoSt) {
Data.biv <- DataEvents[,c(i,j)]
Theta.cen[i,j] <- CensoredEstimationHR(Data.biv, thresholds = .90)
Theta.cen[j,i] <- Theta.cen[i,j]
}
#### EC for modagram ####
## location
locations <- new %>% select(dec_long_va, dec_lat_va)
locations <- as.matrix(locations)
colnames(locations) <- c("lon", "lat")
##Simulate a max-stable process - with unit Frechet margins
library(SpatialExtremes)
##Compute the madogram
theta <- madogram(DataEvents, locations)
maxstable <- fitmaxstab(DataEvents, locations, "whitmat", nugget = 0)
## 3- Plot the extremal coefficient
extcoeff(maxstable)
CatchEucDisWt <- as.matrix(dist((locations)))
FlowCon <- read.csv("F:/StreamFlow/joint_fitting/FlowCon.csv",header = FALSE)
con <- FlowCon[lower.tri(FlowCon)]
FlowCon <- t(FlowCon)
FlowCon[lower.tri(FlowCon)] <- con
m <- matrix(NA, ncol = 27, nrow = 27)
m[lower.tri(m)] <- 1:351
theta <- as.data.frame(theta)
theta$group <- con
theta <- theta %>% mutate(
group = ifelse(group==1, "connected", "unconnected")
)
ggplot(data = theta) +
geom_point(aes(x = dist, y=ext.coeff, color = as.factor(group))) +
# coord_fixed(ratio = 10) +
ylim(c(1,2))
#### HR VS madogram  ####
m2 <- matrix(NA, 27, 27)
m2[lower.tri(m2)] <- theta[,3]
m2 <- t(m2)
m2[lower.tri(m2)] <- theta[,3]
diag(m2) <- 1
plotECF(ECemp = m2,
ECtheo = Theta.cen,
Dist = CatchEucDisWt,
is.con = FlowCon,
StsIdx  = StsChos,
which.plots = c(FALSE,FALSE,TRUE),
which.labels = c(FALSE, FALSE,FALSE),
PDF = FALSE,
filename = paste("Plots","ECF_Emp_HR.pdf",sep="/"))
source("F:/Extre/Codes/Functions.R")
## extraction of events
data <- data %>% select(Date, Q)
data$station <- rep(new$site_no,each = 3680)
data <- data %>% spread(station, Q)
StsChos <- c(1:24)
NoSt <- length(StsChos)
Years <- unique(as.numeric(substr(data$Date,1,4)))
StNames <- as.character(StsChos)
YearsWithEvent <- numeric()
AllEvMat <- matrix(0,length(StNames),1)
AllRes <- list()
for (i in 1:length(Years)){
# events in the i^th year at each station
Res <- ObtainMultVarEvents(TSs=data,U=0.1,Lag=4,Year=Years[i],StNames=StNames,Plotting=0,mfrow=c(NoSt,1))  ## For Censored Likelihood
Events <- Res$AllEvMat
Locations <- Res$Location
if (length(Events)>0) {
YearsWithEvent <- c(YearsWithEvent,rep(Years[i],dim(Events)[2]))
AllEvMat <- cbind(AllEvMat,Events)
}
AllRes[[i]] <- Res
}
DataEvents <- t(AllEvMat[,-1])
rownames(DataEvents) <- YearsWithEvent
source("F:/Extre/Codes/Functions.R")
load("F:/StreamFlow/joint_fitting/joint.Rdata")
load("data/data.Rdata")
load("data/data.Rdata")
data <- data %>% filter(Month %in% 6:8)
data$station <- rep(Siteinfor$site_no,each = 3680)
data <- data %>% filter(Q >= 0)
source("F:/Extre/Codes/Functions.R")
StsChos <- c(1:24)
NoSt <- length(StsChos)
SummerMaxima <- data %>% group_by(station, DecYear) %>% summarise(max(Q)) %>% spread(station, `max(Q)`)
data <- data %>% select(Date, Q)
data$station <- rep(Siteinfor$site_no,each = 3680)
data <- data %>% spread(station, Q)
load("data/data.Rdata")
source("F:/Extre/Codes/Functions.R")
data <- data %>%
filter(Month %in% 6:8) %>%
filter(Q >= 0) %>%
select(Date, Q)
data$station <- rep(Siteinfor$site_no,each = 3680)
data <- data %>% spread(station, Q)
StsChos <- c(1:24)
NoSt <- length(StsChos)
Years <- unique(as.numeric(substr(data$Date,1,4)))
StNames <- as.character(StsChos)
YearsWithEvent <- numeric()
AllEvMat <- matrix(0,length(StNames),1)
AllRes <- list()
for (i in 1:length(Years)){
# events in the i^th year at each station
Res <- ObtainMultVarEvents(TSs=data,U=0.1,Lag=4,Year=Years[i],StNames=StNames,Plotting=0,mfrow=c(NoSt,1))  ## For Censored Likelihood
Events <- Res$AllEvMat
Locations <- Res$Location
if (length(Events)>0) {
YearsWithEvent <- c(YearsWithEvent,rep(Years[i],dim(Events)[2]))
AllEvMat <- cbind(AllEvMat,Events)
}
AllRes[[i]] <- Res
}
DataEvents <- t(AllEvMat[,-1])
rownames(DataEvents) <- YearsWithEvent
DataEvents <- DataEvents[,-c(14:16)]
load("data/data.Rdata")
source("F:/Extre/Codes/Functions.R")
data <- data %>%
filter(Month %in% 6:8) %>%
filter(Q >= 0) %>%
select(Date, Q)
data$station <- rep(Siteinfor$site_no,each = 3680)
data <- data %>% spread(station, Q)
StsChos <- c(1:24)
NoSt <- length(StsChos)
Years <- unique(as.numeric(substr(data$Date,1,4)))
StNames <- as.character(StsChos)
YearsWithEvent <- numeric()
AllEvMat <- matrix(0,length(StNames),1)
AllRes <- list()
for (i in 1:length(Years)){
# events in the i^th year at each station
Res <- ObtainMultVarEvents(TSs=data,U=0.1,Lag=4,Year=Years[i],StNames=StNames,Plotting=0,mfrow=c(NoSt,1))  ## For Censored Likelihood
Events <- Res$AllEvMat
Locations <- Res$Location
if (length(Events)>0) {
YearsWithEvent <- c(YearsWithEvent,rep(Years[i],dim(Events)[2]))
AllEvMat <- cbind(AllEvMat,Events)
}
AllRes[[i]] <- Res
}
DataEvents <- t(AllEvMat[,-1])
rownames(DataEvents) <- YearsWithEvent
View(DataEvents)
CW <- read.csv("data/weight.csv")
CatchtrWt <- CW %>% select(wx,wy)
p <- cbind(CatchtrWt$wy, CatchtrWt$wx)
library(SpatialExtremes)
library(geosphere)
RiverDisWt <- distm(p, p, fun = distHaversine)
RiverDisWt <- RiverDisWt/1000
FlowCon <- read.csv("data/FlowCon.csv",header = FALSE)
con <- FlowCon[lower.tri(FlowCon)]
FlowCon <- t(FlowCon)
FlowCon[lower.tri(FlowCon)] <- con
locations <- Siteinfor %>% select(dec_long_va, dec_lat_va)
locations <- as.matrix(locations)
colnames(locations) <- c("lon", "lat")
##Compute the madogram
theta2 <- madogram(DataEvents, locations)
theta <- madogram(DataEvents, as.matrix(RiverDisWt))
Theta.cen <- matrix(1,ncol = 24,nrow = 24)
for(i in 1:(24-1))
for(j in (i+1):24) {
Data.biv <- DataEvents[,c(i,j)]
Theta.cen[i,j] <- CensoredEstimationHR(Data.biv, thresholds = .90)
Theta.cen[j,i] <- Theta.cen[i,j]
}
Theta <- Theta.cen
Theta <- Theta[lower.tri(Theta)]
dist <- theta[,1]
Theta <- data.frame(Theta, dist)
Theta$group <- con
Theta <- Theta %>% mutate(
group = ifelse(group==1, "connected", "unconnected")
)
ggplot(data = Theta[-c(103,121),]) +
geom_point(aes(x = dist, y=Theta, color = as.factor(group)),size = 2) +
#  coord_fixed(ratio = 10) +
ylim(c(1,2))
Theta2 <- Theta.cen
Theta2 <- Theta2[lower.tri(Theta2)]
dist <- theta2[,1]*100
Theta2 <- data.frame(Theta2, dist)
Theta2$group <- con
Theta2 <- Theta2 %>% mutate(
group = ifelse(group==1, "connected", "unconnected")
)
ggplot(data = Theta2[-c(103,121),]) +
geom_point(aes(x = dist, y=Theta2, color = as.factor(group)),size = 2) +
#  coord_fixed(ratio = 10) +
ylim(c(1,2))
m <- matrix(NA, ncol = 24, nrow = 24)
m[lower.tri(m)] <- 1:276
theta <- madogram(DataEvents, as.matrix(RiverDisWt))
theta <- as.data.frame(theta)
theta$group <- con
theta <- theta %>% mutate(
group = ifelse(group==1, "connected", "unconnected")
)
ggplot(data = theta[-c(103,121),]) +
geom_point(aes(x = dist, y=ext.coeff, color = as.factor(group)),size = 2) +
#  coord_fixed(ratio = 10) +
ylim(c(1,2))
theta2 <- as.data.frame(theta2)
theta2$group <- con
theta2 <- theta2 %>% mutate(
group = ifelse(group==1, "connected", "unconnected")
)
ggplot(data = theta2[-c(103,121),]) +
geom_point(aes(x = dist, y=ext.coeff, color = as.factor(group)),size = 2) +
#  coord_fixed(ratio = 10) +
ylim(c(1,2))
m2 <- matrix(NA, 24, 24)
m2[lower.tri(m2)] <- theta[,3]
m2 <- t(m2)
m2[lower.tri(m2)] <- theta[,3]
diag(m2) <- 1
plotECF(ECemp = m2,
ECtheo = Theta.cen,
Dist = RiverDisWt,
is.con = FlowCon,
StsIdx  = StsChos,
which.plots = c(FALSE,FALSE,TRUE),
which.labels = c(FALSE, FALSE,FALSE),
PDF = FALSE,
filename = paste("Plots","ECF_Emp_HR.pdf",sep="/"))
