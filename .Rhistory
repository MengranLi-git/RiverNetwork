models[[1]] <- list(Th = gevcdn.identity,
fixed = c("location", "scale", "shape"))
models[[2]] <- list(Th = gevcdn.identity)
# Nonlinear, 1 hidden node
models[[3]] <- list(n.hidden = 1, Th = gevcdn.logistic)
# Nonlinear, 2 hidden nodes
models[[4]] <- list(n.hidden = 2, Th = gevcdn.logistic)
weights.models <- vector("list", length(models))
for(i in seq_along(models)){
weights.models[[i]] <- gevcdn.fit(x = x, y = y, n.trials = 1,
n.hidden = models[[i]]$n.hidden,
Th = models[[i]]$Th,
fixed = models[[i]]$fixed)
}
View(weights.models)
## Select model with minimum AICc
models.AICc <- sapply(weights.models, attr, which = "AICc")
weights.best <- weights.models[[which.min(models.AICc)]]
parms.best <- gevcdn.evaluate(x, weights.best)
## 10th, 50th, and 90th percentiles
q.best <- sapply(c(0.1, 0.5, 0.9), qgev,
location = parms.best[,"location"],
scale = parms.best[,"scale"],
shape = parms.best[,"shape"])
matplot(x, cbind(y, q, q.best), type = c("b", rep("l", 6)),
lty = c(1, rep(c(1, 2, 1), 2)),
lwd = c(1, rep(c(3, 2, 3), 2)),
col = c("red", rep("orange", 3), rep("blue", 3)),
pch = 19, xlab = "x", ylab = "y", main = "gevcdn.fit")
x <- as.matrix(seq(0.1, 1, length = 50))
loc <- x^2
scl <- x/2
shp <- seq(-0.1, 0.3, length = length(x))
set.seed(100)
y <- as.matrix(rgev(length(x), location = loc, scale = scl,
shape = shp))
q <- sapply(c(0.1, 0.5, 0.9), qgev, location = loc, scale = scl,
shape = shp)
x
y
?qgev
rm(loc,scl,shp)
models <- vector("list", 4)
models <- list(Th = gevcdn.identity,
fixed = c("location", "scale", "shape"))
weights.models <- gevcdn.fit(x = x, y = y, n.trials = 1,
n.hidden = models$n.hidden,
Th = models$Th,
fixed = models$fixed)
summary(weights.models)
weights.models$W1
weights.models$W2
attr(weights.models$W2)
attr(weights.models$W2, "Th")
?gevcdn.fit
load("data/data.Rdata")
data <- data %>% filter(Month %in% 6:8)
data$station <- rep(Siteinfor$site_no,each = 3680)
data <- data %>% filter(Q >= 0)
NoSt <- 24
#### GEV marginal ####
SummerMaxima <- data %>% group_by(station, DecYear) %>% summarise(max(Q)) %>% spread(station, `max(Q)`)
models <- vector("list", 4)
# Stationary model
models[[1]] <- list(Th = gevcdn.identity,
fixed = c("location", "scale", "shape"))
# Linear model
models[[2]] <- list(Th = gevcdn.identity)
# Nonlinear, 1 hidden node
models[[3]] <- list(n.hidden = 1, Th = gevcdn.logistic)
# Nonlinear, 2 hidden nodes
models[[4]] <- list(n.hidden = 2, Th = gevcdn.logistic)
weights.models <- vector("list", length(models))
for(i in seq_along(models)){
weights.models[[i]] <- gevcdn.fit(x = SummerMaxima$DecYear, y = SummerMaxima$`05211000`, n.trials = 1,
n.hidden = models[[i]]$n.hidden,
Th = models[[i]]$Th,
fixed = models[[i]]$fixed)
}
for(i in seq_along(models)){
weights.models[[i]] <- gevcdn.fit(x = as.matrix(SummerMaxima$DecYear), y = SummerMaxima$`05211000`, n.trials = 1,
n.hidden = models[[i]]$n.hidden,
Th = models[[i]]$Th,
fixed = models[[i]]$fixed)
}
for(i in seq_along(models)){
weights.models[[i]] <- gevcdn.fit(x = as.matrix(SummerMaxima$DecYear), y = as.matrix(SummerMaxima$`05211000`), n.trials = 1,
n.hidden = models[[i]]$n.hidden,
Th = models[[i]]$Th,
fixed = models[[i]]$fixed)
}
models.AICc <- sapply(weights.models, attr, which = "AICc")
weights.best <- weights.models[[which.min(models.AICc)]]
parms.best <- gevcdn.evaluate(x, weights.best)
parms.best <- gevcdn.evaluate(SummerMaxima, weights.best)
parms.best <- gevcdn.evaluate(as.matrix(SummerMaxima$DecYear), weights.best)
q.best <- sapply(c(0.1, 0.5, 0.9), qgev,
location = parms.best[,"location"],
scale = parms.best[,"scale"],
shape = parms.best[,"shape"])
matplot(x, cbind(y, q.best), type = c("b", rep("l", 6)),
lty = c(1, rep(c(1, 2, 1), 2)),
lwd = c(1, rep(c(3, 2, 3), 2)),
col = c("red", rep("orange", 3), rep("blue", 3)),
pch = 19, xlab = "x", ylab = "y", main = "gevcdn.fit")
matplot(x, cbind(y, q.best), type = c("b", rep("l", 6)),
lty = c(1, rep(c(1, 1), 2)),
lwd = c(1, rep(c(3, 3), 2)),
col = c("red", rep("orange", 3), rep("blue", 3)),
pch = 19, xlab = "x", ylab = "y", main = "gevcdn.fit")
matplot(as.matrix(SummerMaxima$DecYear), cbind(as.matrix(SummerMaxima$`05211000`), q.best), type = c("b", rep("l", 6)),
lty = c(1, rep(c(1, 1), 2)),
lwd = c(1, rep(c(3, 3), 2)),
col = c("red", rep("orange", 3), rep("blue", 3)),
pch = 19, xlab = "x", ylab = "y", main = "gevcdn.fit")
View(q.best)
for(j in 1:24){
x <- as.matrix(SummerMaxima$DecYear)
y <- as.matrix(SummerMaxima[,j+1])
## Define a hierarchy of models of increasing complexity
models <- vector("list", 4)
# Stationary model
models[[1]] <- list(Th = gevcdn.identity,
fixed = c("location", "scale", "shape"))
# Linear model
models[[2]] <- list(Th = gevcdn.identity)
# Nonlinear, 1 hidden node
models[[3]] <- list(n.hidden = 1, Th = gevcdn.logistic)
# Nonlinear, 2 hidden nodes
models[[4]] <- list(n.hidden = 2, Th = gevcdn.logistic)
## Fit models
weights.models <- vector("list", length(models))
for(i in seq_along(models)){
weights.models[[i]] <- gevcdn.fit(x = x, y = y, n.trials = 1,
n.hidden = models[[i]]$n.hidden,
Th = models[[i]]$Th,
fixed = models[[i]]$fixed)
}
## Select model with minimum AICc
models.AICc <- sapply(weights.models, attr, which = "AICc")
weights.best <- weights.models[[which.min(models.AICc)]]
parms.best <- gevcdn.evaluate(as.matrix(SummerMaxima$DecYear), weights.best)
## 10th, 50th, and 90th percentiles
q.best <- sapply(c(0.1, 0.5, 0.9), qgev,
location = parms.best[,"location"],
scale = parms.best[,"scale"],
shape = parms.best[,"shape"])
## Plot data and quantiles
matplot(x, cbind(y, q.best), type = c("b", rep("l", 6)),
lty = c(1, rep(c(1, 1), 2)),
lwd = c(1, rep(c(3, 3), 2)),
col = c("red", rep("orange", 3), rep("blue", 3)),
pch = 19, xlab = "x", ylab = "y", main = "gevcdn.fit")
}
?matplot
## Generate synthetic data, quantiles
for(j in 1:24){
x <- as.matrix(SummerMaxima$DecYear)
y <- as.matrix(SummerMaxima[,j+1])
## Define a hierarchy of models of increasing complexity
models <- vector("list", 4)
# Stationary model
models[[1]] <- list(Th = gevcdn.identity,
fixed = c("location", "scale", "shape"))
# Linear model
models[[2]] <- list(Th = gevcdn.identity,
fixed = c("shape"))
# Nonlinear, 1 hidden node
models[[3]] <- list(n.hidden = 1, Th = gevcdn.logistic,
fixed = c("shape"))
# Nonlinear, 2 hidden nodes
models[[4]] <- list(n.hidden = 2, Th = gevcdn.logistic,
fixed = c("shape"))
## Fit models
weights.models <- vector("list", length(models))
for(i in seq_along(models)){
weights.models[[i]] <- gevcdn.fit(x = x, y = y, n.trials = 1,
n.hidden = models[[i]]$n.hidden,
Th = models[[i]]$Th,
fixed = models[[i]]$fixed)
}
## Select model with minimum AICc
models.AICc <- sapply(weights.models, attr, which = "AICc")
weights.best <- weights.models[[which.min(models.AICc)]]
parms.best <- gevcdn.evaluate(x, weights.best)
## 10th, 50th, and 90th percentiles
q.best <- sapply(c(0.1, 0.5, 0.9), qgev,
location = parms.best[,"location"],
scale = parms.best[,"scale"],
shape = parms.best[,"shape"])
## Plot data and quantiles
matplot(x, cbind(y, q.best), type = c("b", rep("l", 6)),
lty = c(1, rep(c(1, 1), 2)),
lwd = c(1, rep(c(3, 3), 2)),
col = c("red", rep("orange", 3), rep("blue", 3)),
pch = 19, xlab = "x", ylab = "y", main = "gevcdn.fit")
## Generate synthetic data, quantiles
for(j in 1:24){
x <- as.matrix(SummerMaxima$DecYear)
y <- as.matrix(SummerMaxima[,j+1])
## Define a hierarchy of models of increasing complexity
models <- vector("list", 4)
# Stationary model
models[[1]] <- list(Th = gevcdn.identity,
fixed = c("location", "scale", "shape"))
# Linear model
models[[2]] <- list(Th = gevcdn.identity,
fixed = c("shape"))
# Nonlinear, 1 hidden node
models[[3]] <- list(n.hidden = 1, Th = gevcdn.logistic,
fixed = c("shape"))
# Nonlinear, 2 hidden nodes
models[[4]] <- list(n.hidden = 2, Th = gevcdn.logistic,
fixed = c("shape"))
## Fit models
weights.models <- vector("list", length(models))
for(i in seq_along(models)){
weights.models[[i]] <- gevcdn.fit(x = x, y = y, n.trials = 1,
n.hidden = models[[i]]$n.hidden,
Th = models[[i]]$Th,
fixed = models[[i]]$fixed)
}
## Select model with minimum AICc
models.AICc <- sapply(weights.models, attr, which = "AICc")
weights.best <- weights.models[[which.min(models.AICc)]]
parms.best <- gevcdn.evaluate(x, weights.best)
## 10th, 50th, and 90th percentiles
q.best <- sapply(c(0.1, 0.5, 0.9), qgev,
location = parms.best[,"location"],
scale = parms.best[,"scale"],
shape = parms.best[,"shape"])
## Plot data and quantiles
matplot(x, cbind(y, q.best), type = c("b", rep("l", 6)),
lty = c(1, rep(c(1, 1), 2)),
lwd = c(1, rep(c(3, 3), 2)),
col = c("red", rep("orange", 3), rep("blue", 3)),
pch = 19, xlab = "x", ylab = "y", main = "gevcdn.fit")
}
}
## Generate synthetic data, quantiles
for(j in 1:24){
x <- as.matrix(SummerMaxima$DecYear)
y <- as.matrix(SummerMaxima[,j+1])
## Define a hierarchy of models of increasing complexity
models <- vector("list", 4)
# Stationary model
models[[1]] <- list(Th = gevcdn.identity,
fixed = c("location", "scale", "shape"))
# Linear model
models[[2]] <- list(Th = gevcdn.identity,
fixed = c("shape"))
# Nonlinear, 1 hidden node
models[[3]] <- list(n.hidden = 1, Th = gevcdn.logistic,
fixed = c("shape"))
# Nonlinear, 2 hidden nodes
models[[4]] <- list(n.hidden = 2, Th = gevcdn.logistic,
fixed = c("shape"))
## Fit models
weights.models <- vector("list", length(models))
for(i in seq_along(models)){
weights.models[[i]] <- gevcdn.fit(x = x, y = y, n.trials = 1,
n.hidden = models[[i]]$n.hidden,
Th = models[[i]]$Th,
fixed = models[[i]]$fixed)
}
## Select model with minimum AICc
models.AICc <- sapply(weights.models, attr, which = "AICc")
weights.best <- weights.models[[which.min(models.AICc)]]
parms.best <- gevcdn.evaluate(x, weights.best)
## 10th, 50th, and 90th percentiles
q.best <- sapply(c(0.1, 0.5, 0.9), qgev,
location = parms.best[,"location"],
scale = parms.best[,"scale"],
shape = parms.best[,"shape"])
## Plot data and quantiles
matplot(x, cbind(y, q.best), type = c("b", rep("l", 6)),
lty = c(1, rep(c(1, 1), 2)),
lwd = c(1, rep(c(3, 3), 2)),
col = c("red", rep("orange", 3), rep("blue", 3)),
pch = 19, xlab = "x", ylab = "y", main = "gevcdn.fit")
}
#### library packages ####
library(tidyverse)
library(ismev)
library(evd)
#### load data ####
load("data/data.Rdata")
data <- data %>% filter(Month %in% 6:8)
data$station <- rep(Siteinfor$site_no,each = 3680)
data <- data %>% filter(Q >= 0)
NoSt <- 24
#### GEV marginal ####
SummerMaxima <- data %>% group_by(station, DecYear) %>% summarise(max(Q)) %>% spread(station, `max(Q)`)
sh <- numeric(NoSt)
se <- numeric(NoSt)
for (i in 1:NoSt) {
Station <- SummerMaxima[,c(1, i+1)]
names(Station) <- c("DecYear", "Q")
fit <- gev.fit(Station$Q, Station, show = FALSE)
shape[i] <- fit$mle[3]
se[i] <- fit$se[3]
}
#### library packages ####
library(tidyverse)
library(ismev)
library(evd)
#### load data ####
load("data/data.Rdata")
data <- data %>% filter(Month %in% 6:8)
data$station <- rep(Siteinfor$site_no,each = 3680)
data <- data %>% filter(Q >= 0)
NoSt <- 24
#### GEV marginal ####
SummerMaxima <- data %>% group_by(station, DecYear) %>% summarise(max(Q)) %>% spread(station, `max(Q)`)
#### define breakpoint ####
shape <- numeric(NoSt)
se <- numeric(NoSt)
for (i in 1:NoSt) {
Station <- SummerMaxima[,c(1, i+1)]
names(Station) <- c("DecYear", "Q")
fit <- gev.fit(Station$Q, Station, show = FALSE)
shape[i] <- fit$mle[3]
se[i] <- fit$se[3]
}
point <- matrix(NA, ncol=3, nrow=NoSt)
for (i in 1:NoSt) {
Station <- SummerMaxima[,c(1, i+1)]
MOV <- MovingWindow(
x = Station, win = 10, url = "plot/MovingWindow",
save = TRUE, name = quote(Station)
)
x <- Region$V1
points[i,1] <-  breakpoints(Fstats(MOV[,2] ~ 1))$breakpoints
points[i,2] <-  breakpoints(Fstats(MOV[,3] ~ 1))$breakpoints
points[i,3] <-  breakpoints(Fstats(x ~ 1))$breakpoints
}
point <- as.data.frame(point)
source("code/NonLinearGEV/MovingWindow.R")
point <- matrix(NA, ncol=3, nrow=NoSt)
for (i in 1:NoSt) {
Station <- SummerMaxima[,c(1, i+1)]
MOV <- MovingWindow(
x = Station, win = 10, url = "plot/MovingWindow",
save = TRUE, name = quote(Station)
)
x <- Region$V1
points[i,1] <-  breakpoints(Fstats(MOV[,2] ~ 1))$breakpoints
points[i,2] <-  breakpoints(Fstats(MOV[,3] ~ 1))$breakpoints
points[i,3] <-  breakpoints(Fstats(x ~ 1))$breakpoints
}
point <- as.data.frame(point)
point <- matrix(NA, ncol=3, nrow=NoSt)
for (i in 1:NoSt) {
Station <- SummerMaxima[,c(1, i+1)]
names(Station) <- c("DecYear", "Q")
MOV <- MovingWindow(
x = Station, win = 10, url = "plot/MovingWindow",
save = TRUE, name = quote(Station)
)
x <- Station$Q
points[i,1] <-  breakpoints(Fstats(MOV[,2] ~ 1))$breakpoints
points[i,2] <-  breakpoints(Fstats(MOV[,3] ~ 1))$breakpoints
points[i,3] <-  breakpoints(Fstats(x ~ 1))$breakpoints
}
point <- as.data.frame(point)
points
for (i in 1:NoSt) {
Station <- SummerMaxima[,c(1, i+1)]
names(Station) <- c("DecYear", "Q")
MOV <- MovingWindow(
x = Station, win = 10, url = "plot/MovingWindow",
save = TRUE, name = quote(Station)
)
}
for (i in 1:NoSt) {
Station <- SummerMaxima[,c(1, i+1)]
names(Station) <- c("DecYear", "Q")
MOV <- MovingWindow(
x = Station, win = 10, url = "plot/MovingWindow",
save = TRUE, name = i
)
}
?gev.fit
source("code/NonLinearGEV/MovingWindow.R")
for (i in 1:NoSt) {
Station <- SummerMaxima[,c(1, i+1)]
names(Station) <- c("DecYear", "Q")
MOV <- MovingWindow(
x = Station, win = 10, url = "plot/MovingWindow",shinit = shape[i],
save = TRUE, name = i
)
}
gev.fit
source("code/NonLinearGEV/gev.fix.R")
View(MovingWindow)
for (i in 1:NoSt) {
Station <- SummerMaxima[,c(1, i+1)]
names(Station) <- c("DecYear", "Q")
MOV <- MovingWindow(
x = Station, win = 10, url = "plot/MovingWindow",fix.sh = shape[i],
save = TRUE, name = i
)
}
source("code/NonLinearGEV/MovingWindow.R")
for (i in 1:NoSt) {
Station <- SummerMaxima[,c(1, i+1)]
names(Station) <- c("DecYear", "Q")
MOV <- MovingWindow(
x = Station, win = 10, url = "plot/MovingWindow",fix.sh = shape[i],
save = TRUE, name = i
)
}
i = 1
Station <- SummerMaxima[,c(1, i+1)]
names(Station) <- c("DecYear", "Q")
MovingWindow(
x = Station, win = 10, url = "plot/MovingWindow",fix.sh = shape[i],
save = TRUE, name = i
)
View(MovingWindow)
x = Station; win = 10; url = "plot/MovingWindow"; fix.sh = shape[i];
save = TRUE; name = i
n_row = nrow(x)
n_sep = round(win/2)
#  fit <- gev.fit(x$V1)
#  shape <- fit$mle[3]
parameter <- as.data.frame(matrix(NA, ncol=4, nrow=n_row))
names(parameter) <- c("t","location","scale","shape")
for (i in 1:(n_row-2*n_sep)){
in2 <- log(sqrt(6 * var(x$Q[i:(i+win)]))/pi)
fit <- gev.fix(x$Q[i:(i+win)],siglink = exp, siginit=in2, show = FALSE, fix.sh = fix.sh)
parameter[i+n_sep,1] <- i+n_sep
parameter[i+n_sep,2:4] <- fit$mle
}
i=1
in2 <- log(sqrt(6 * var(x$Q[i:(i+win)]))/pi)
in2
gev.fix(x$Q[i:(i+win)],siglink = exp, siginit=in2, show = FALSE, fix.sh = fix.sh)
fit <- gev.fix(x$Q[i:(i+win)],siglink = exp, siginit=in2, show = FALSE, fix.sh = fix.sh)
parameter[i+n_sep,1]
i+n_sep
parameter[i+n_sep,1] <- i+n_sep
fit$mle
fit2 <- gev.fit(x$Q[i:(i+win)],siglink = exp, siginit=in2, show = FALSE)
fit2$mle
fit$mle
parameter[i+n_sep,2:4] <- c(fit$mle, fix.sh)
c(fit$mle, fix.sh)
View(MovingWindow)
source("code/NonLinearGEV/MovingWindow.R")
for (i in 1:NoSt) {
Station <- SummerMaxima[,c(1, i+1)]
names(Station) <- c("DecYear", "Q")
MOV <- MovingWindow(
x = Station, win = 10, url = "plot/MovingWindow",fix.sh = shape[i],
save = TRUE, name = i
)
}
View(MOV)
library(strucchange)
breakpoints(Fstats(MOV[,3] ~ 1))$breakpoints
point <- matrix(NA, ncol = 2,nrow = NoSt)
for (i in 1:NoSt) {
Station <- SummerMaxima[,c(1, i+1)]
names(Station) <- c("DecYear", "Q")
MOV <- MovingWindow(
x = Station, win = 10, url = "plot/MovingWindow",fix.sh = shape[i],
save = TRUE, name = i
)
point[i,1] <-  breakpoints(Fstats(MOV[,2] ~ 1))$breakpoints
point[i,2] <-  breakpoints(Fstats(MOV[,3] ~ 1))$breakpoints
}
View(point)
point <- as.data.frame(point)
library(tidyverse)
library(ismev)
library(evd)
library(strucchange)
source("code/NonLinearGEV/MovingWindow.R")
source("code/NonLinearGEV/gev.fix.R")
#### load data ####
load("data/data.Rdata")
data <- data %>% filter(Month %in% 6:8)
data$station <- rep(Siteinfor$site_no,each = 3680)
data <- data %>% filter(Q >= 0)
NoSt <- 24
#### GEV marginal ####
SummerMaxima <- data %>% group_by(station, DecYear) %>% summarise(max(Q)) %>% spread(station, `max(Q)`)
#### define breakpoint ####
shape <- numeric(NoSt)
se <- numeric(NoSt)
for (i in 1:NoSt) {
Station <- SummerMaxima[,c(1, i+1)]
names(Station) <- c("DecYear", "Q")
fit <- gev.fit(Station$Q, Station, show = FALSE)
shape[i] <- fit$mle[3]
se[i] <- fit$se[3]
}
point <- matrix(NA, ncol = 2,nrow = NoSt)
for (i in 1:NoSt) {
Station <- SummerMaxima[,c(1, i+1)]
names(Station) <- c("DecYear", "Q")
MOV <- MovingWindow(
x = Station, win = 10, url = "plot/MovingWindow",fix.sh = shape[i],
save = TRUE, name = i
)
point[i,1] <-  breakpoints(Fstats(MOV[,2] ~ 1))$breakpoints
point[i,2] <-  breakpoints(Fstats(MOV[,3] ~ 1))$breakpoints
}
point <- as.data.frame(point)
rm(fit, MOV, Station)
rm(fit, MOV, Station, i)
